def set_template(args):
    if args.template == 'UNet_PRIOR_PREDICT_Weighted_OrdinalSupcon_Light':
        args.task = "VideoDeblur"
        args.model = "TIME_PRIOR_PREDICT_WEIGHTED"
        args.n_sequence = 4
        args.n_frames_per_video = 1500
        args.n_feat = 64
        args.n_resblock = [2, 2, 2, 2]
        args.size_must_mode = 8
        args.loss = '1*OrdinalSupCon'
        args.lr = 1e-1
        args.epochs = 500
        args.batch_size = 16  # on GPU 3090*2
        # args.first_cuda_batch_size = 4
        args.n_GPUs = 2
        args.dir_data = '/home/sw/sw/dataset/Event-data/GOPRO_large_all/train/images'
        args.dir_data_test = '/home/sw/sw/dataset/Event-data/GOPRO_large_all/val/images'
        # args.pre_train = '../experiment/Predictor/GoPro8x/model_latest.pt'
        args.data_train = 'GOPRO_PRIOR_PRETRAIN'
        args.data_test = 'GOPRO_PRIOR_PRETRAIN'
        args.offset_network_path = '../pretrained_model/latest_net_offset_quad.ckpt'
        args.patience = 10
    elif args.template == 'UNet_PRIOR_PREDICT_Weighted_OrdinalSupcon_Light_Adobe':
        args.task = "VideoDeblur"
        args.model = "TIME_PRIOR_PREDICT_WEIGHTED"
        args.n_sequence = 4
        args.n_frames_per_video = 1500
        args.n_feat = 64
        args.n_resblock = [2, 2, 2, 2] #[9, 9, 9, 9]
        args.size_must_mode = 8
        args.loss = '1*OrdinalSupCon'
        args.lr = 1e-1
        args.epochs = 200
        args.batch_size = 40    # on GPU V100(16GB)*4
        # args.first_cuda_batch_size = 4
        args.blur_deg = 3
        args.n_GPUs = 4
        args.dir_data = '/home/sw/sw/dataset/dataset/adobe240/train'
        args.dir_data_test = '/home/sw/sw/dataset/dataset/adobe240/val'
        args.pre_train = '../experiment/Predictor/GoPro8x/model_latest.ckpt'
        args.data_train = 'ADOBE_PRIOR_PRETRAIN'
        args.data_test = 'ADOBE_PRIOR_PRETRAIN'
        args.patience = 5
        args.offset_network_path = '../pretrained_model/latest_net_offset_quad.ckpt'
        # args.mid_loss_weight = 2  #1
    elif args.template == 'UNet_PRIOR_PREDICT_Weighted_OrdinalSupcon_Light_16x':
        args.task = "VideoDeblur"
        args.model = "TIME_PRIOR_PREDICT_WEIGHTED"
        args.n_sequence = 4
        args.n_frames_per_video = 1500
        args.n_feat = 64
        args.n_resblock = [2, 2, 2, 2] #[9, 9, 9, 9]
        args.size_must_mode = 8
        args.loss = '1*OrdinalSupCon'
        args.lr = 1e-1
        args.epochs = 200
        args.batch_size = 4    # on GPU V100(16GB)*4
        # args.first_cuda_batch_size = 4
        args.n_GPUs = 4
        args.dir_data = '/data/work/GoPro_Large_all/train_sample'
        args.dir_data_test = '/data/work/GoPro_Large_all/train_sample'
        args.pre_train = '../experiment/Predictor/GoPro8x/model_latest.ckpt'
        args.data_train = 'GOPRO_PRIOR_PRETRAIN'
        args.data_test = 'GOPRO_PRIOR_PRETRAIN'
        args.patience = 5  #10
        args.offset_network_path = '../pretrained_model/latest_net_offset_quad.ckpt'
        args.m = 11
        args.n = 5
        args.n_outputs = 16
    elif args.template == 'VIDUE_WORSU':
        args.task = "VideoDeblur"
        args.model = "VIDUE_WORSU"
        args.n_sequence = 4
        args.n_frames_per_video = 1500
        args.n_feat = 64
        args.n_resblock = [3, 6, 6, 6]
        args.size_must_mode = 8
        args.loss = '1*L1'
        args.lr = 2e-4
        args.epochs = 400
        args.batch_size = 1  # on GPU 3090 * 2
        # args.first_cuda_batch_size = 4
        args.n_GPUs = 2
        args.dir_data = '/data/work/GoPro_Large_all/train_sample'
        args.dir_data_test = '/data/work/GoPro_Large_all/train_sample'
        args.patience = 5  # 5
        args.offset_network_path = '../pretrained_model/latest_net_offset_quad.ckpt'
        # args.pre_train = '../experiment/VIDUE_GoPro8x/model_best.pt'
        args.patch_size = 288  # 320
        args.mid_loss_weight = 1e-4
        args.p = [0.5, 0.5]
        args.extractor_path = '../experiment/Predictor/GoPro8x/model_latest.ckpt'
        args.opti = 'Adamax'
    elif args.template == 'VIDUE_WORSU_Adobe':
        args.task = "VideoDeblur"
        args.model = "VIDUE_WORSU"
        args.n_sequence = 4
        args.n_frames_per_video = 1500
        args.n_feat = 64
        args.n_resblock = [3, 6, 6, 6]
        args.size_must_mode = 8
        args.loss = '1*L1'
        args.lr = 1.5e-4  # 2e-4
        args.epochs = 200
        args.batch_size = 16  # on GPU V100(16GB)*4
        # args.first_cuda_batch_size = 4
        args.n_GPUs = 4
        args.dir_data = '/home/sw/sw/dataset/dataset/adobe240/train'
        args.dir_data_test = '/home/sw/sw/dataset/dataset/adobe240/val'
        args.patience = 2  # 5
        args.offset_network_path = '../pretrained_model/latest_net_offset_quad.ckpt'
        args.pre_train = '../experiment/VIDUE_GoPro8x/model_best.ckpt'
        args.patch_size = 288   #320
        args.mid_loss_weight = 1e-4
        args.p = [0.5, 0.5]
        args.data_train = 'ADOBE'
        args.data_test = 'ADOBE'
        args.blur_deg = 3
        args.opti = 'Adamax'
        args.extractor_path = "../experiment/Predictor/Adobe8x/model_latest.ckpt"
    elif args.template == 'VIDUE_WORSU_16x':
        args.task = "VideoDeblur"
        args.model = "VIDUE_WORSU"
        args.n_sequence = 4
        args.n_frames_per_video = 1500
        args.n_feat = 64
        args.n_resblock = [3, 6, 6, 6]
        args.size_must_mode = 8
        args.loss = '1*L1'
        args.lr = 2e-4
        args.epochs = 200
        args.batch_size = 8  # on GPU V100(16GB)*4
        # args.first_cuda_batch_size = 4
        args.n_GPUs = 4
        args.dir_data = '/home/sw/sw/dataset/Event-data/GOPRO_large_all/train/images'
        args.dir_data_test = '/home/sw/sw/dataset/Event-data/GOPRO_large_all/val/images'
        args.patience = 5
        args.offset_network_path = '../pretrained_model/latest_net_offset_quad.ckpt'
        args.pre_train = '../experiment/VIDUE_GoPro8x/model_best.ckpt'
        args.patch_size = 320
        args.mid_loss_weight = 1e-4
        args.p = [0.25, 0.25, 0.25, 0.25]
        args.extractor_path = '../experiment/Predictor/GoPro16x/model_best.ckpt'
        args.opti = 'Adamax'
        args.m = 15
        args.n = 1
        args.n_outputs = 16
    else:
        raise NotImplementedError('Template [{:s}] is not found'.format(args.template))




